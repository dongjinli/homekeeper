set nocompatible
set clipboard=unnamed
set fileencoding=utf-8
set termencoding=utf-8
set autoindent
set background=dark
set backspace=indent,eol,start
set complete=.,w,b,t,i
set completeopt=longest,menuone
set expandtab
set fileformat=unix
set fillchars=stl:_,stlnc:-,vert:\|,fold:\ ,diff:-
set gdefault
set guioptions+=c
set history=50
set hlsearch
set incsearch
set ignorecase
set indentexpr=
set infercase
set laststatus=2
set lazyredraw
set listchars=tab:│\ ,trail:·
set modelines=0
set nobackup
set noerrorbells
set nofoldenable
set nolist
set novisualbell
set number
set pastetoggle=<F1>
set ruler
set selection=inclusive
set selectmode=mouse
set shiftwidth=2
set showcmd
set showmode
set showmatch
set smartcase
set smartindent
set smarttab
set softtabstop=2
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]
set t_Co=256
set tabstop=2
set ttyfast
set wildmenu
set wildchar=<tab>
set wildignore=*.class,*.o,*.obj,*.bak,*.exe,*.jpg,*.png,*.gif,*.jar,*/.git/*,*/.hg/*,*/.svn/*,*/target/*
set wildmode=list:longest

let mapleader=","
let g:Tb_SplitBelow=1
let g:Tb_MaxSize=0
let g:Tb_MoreThanOne=2
let g:ctrlp_map='<c-t>'

call pathogen#infect()

syntax on
filetype plugin indent on
colorscheme jellybeans

" Mappings
"   Toggle highlighting of really long lines
map <silent> <F11>
      \ :if exists('w:long_line_match') <Bar>
      \   silent! call matchdelete(w:long_line_match) <Bar>
      \   unlet w:long_line_match <Bar>
      \ elseif &textwidth > 0 <Bar>
      \   let w:long_line_match = matchadd('OverColLimit', '\%>'.&tw.'v.\+', -1) <Bar>
      \ else <Bar>
      \   let w:long_line_match = matchadd('OverColLimit', '\%>80v.\+', -1) <Bar>
      \ endif<CR>
"   Remove all trailing whitespace
map <silent> <F12> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Normal mode mappings (same as nnoremap)
nmap ; :
nmap / /\v
nmap j gj
nmap k gk
nmap <tab> %
nmap <c-n> :Tbbn<cr>
nmap <c-p> :Tbbp<cr>
nmap <leader><tab> :Scratch<cr>
" nmap <leader>b (used by camecasemotion)
nmap <leader>cd :cd %:p:h<cr>
nmap <leader>d :bd<cr>:syn on<cr>
nmap <leader>e :set expandtab! list!<cr>
nmap <leader>h <c-w>h<cr>
nmap <leader>j <c-w>j<cr>
nmap <leader>k <c-w>k<cr>
nmap <leader>l <c-w>l<cr>
nmap <leader>n :Tbbn<cr>
nmap <leader>p :Tbbp<cr>
nmap <leader>r :res<cr>
" nmap <leader>s (used by slime.vim)
nmap <silent> <leader>t :!ctags -R * &<cr><cr>
nmap <leader>u :set number!<cr>
nmap <leader>v V`]
" nmap <leader>w (used by camelcasemotion)
nmap <leader>q :q!<cr>
" nmap <leader>x (used by slime.vim)
nmap <leader>= <c-w>=<cr>
nmap <leader><space> :set hlsearch!<cr>

" Visual mode mappings (same as vnoremap)
vmap / /\v
vmap j gj
vmap k gk
vmap <tab> %

" Insert mode mappings (same as inoremap)
"   When an auto-complete menu is presented, the first item is selected by
"   default
imap <expr> <c-n> pumvisible() ? '<c-n>' :
    \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<cr>'
"   Simulates <c-x><c-o> to bring up omni-complete, and simulates <c-n><c-p>
"   to remove the longest common text
imap <expr> <m-,> pumvisible() ? '<c-n>' :
    \ '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
"   Maps ctrl+space to autocomplete, just like in your favorite IDEs
imap <nul> <c-x><c-u><c-p>

" Highlight really long lines
highlight OverColLimit ctermbg=darkblue

" Highlight all trailing whitespace
au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\s\+$', -1)

" Project specific settings
set secure
au BufEnter,BufReadPost * silent! source ./project.vim
